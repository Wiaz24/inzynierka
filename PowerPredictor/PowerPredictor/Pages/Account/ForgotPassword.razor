@page "/account/forgotpassword"

@inject IEmailService EmailService
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager

<PageTitle>Forgot password</PageTitle>

<FormCard Title="Provide email for recovery" Width="500px">
    
    <EditForm Model="emailModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-floating mb-2">
            <InputText id="InputEmail" class="form-control" aria-required="true" placeholder="" @bind-Value="emailModel.Email" />
            <label for="InputEmail" class="form-label">Email</label>
            <ValidationMessage For="() => emailModel.Email" />
        </div>

        <LoadingButton IsLoading="isLoading" FullWidth="true">
            Send email
        </LoadingButton>
        @if (alert)
        {
            <Alert Color="@alertColor" Dismissable="false" Style="text-align: left;" Class="mt-3">
                <Icon Name="@alertIcon" class="me-2"></Icon>
                @alertMessage
            </Alert>
        }
    </EditForm>
</FormCard>

@code {
    public class EmailModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
    }

    public bool alert = false;
    public string alertMessage = "";
    public AlertColor alertColor = AlertColor.Success;
    public IconName alertIcon = IconName.InfoCircleFill;

    private bool isLoading = false;

    public EmailModel emailModel = new EmailModel();

    public async Task HandleValidSubmit()
    {
        isLoading = true;
        alertMessage = "Email with password reset link has been sent to provided email address.";

        var user = await UserManager.FindByEmailAsync(emailModel.Email);
        if (user == null)
        {
            //we don't want to reveal if user exists or not
            alert = true;
        }
        else if (await SignInManager.CanSignInAsync(user))
        {
            var token = await UserManager.GeneratePasswordResetTokenAsync(user);

            //encoding token to Base64 for safety and removing nonalphanumeric characters
            var encodedToken = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(token));

            var resetLink = NavigationManager.ToAbsoluteUri($"/account/reset-password/{user.Id}/{encodedToken}");
            EmailService.SendResetPasswordEmail(emailModel.Email, resetLink.ToString());
            
            alert = true;
        }
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
}
