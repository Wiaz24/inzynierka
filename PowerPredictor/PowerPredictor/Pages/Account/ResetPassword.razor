@page "/account/reset-password/{userId}/{encryptedToken}"

@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Reset password</PageTitle>

<FormCard Title="Provide new password" Width="500px">
    
    <EditForm Model="resetPasswordModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-floating mb-2">
            <InputText id="FirstPassword" type="password" class="form-control" aria-required="true" placeholder="" @bind-Value="resetPasswordModel.Password" />
            <label for="FirstPassword" class="form-label">New Password</label>
            <ValidationMessage For="() => resetPasswordModel.Password" />
        </div>

        <div class="form-floating mb-2">
            <InputText id="InputPassword" type="password" class="form-control" aria-required="true" placeholder="" @bind-Value="resetPasswordModel.ConfirmPassword" />
            <label for="InputPassword" class="form-label">Confirm new password</label>
            <ValidationMessage For="() => resetPasswordModel.ConfirmPassword" />
        </div>

        <LoadingButton IsLoading="isLoading" FullWidth="true">
            Change password
        </LoadingButton>
        @if (changeSuccess)
        {
            <div class="alert alert-success mt-4">
                <strong>Your password has been changed</strong>
            </div>
        }
        @if (error)
        {
            <div class="alert alert-danger mt-4">
                <strong>@errorMessage</strong>
            </div>
        }
    </EditForm>
</FormCard>

@code {
    public class ResetPasswordModel
    {
        [Required]
        [ValidatePassword]
        public string Password { get; set; } = null!;

        [Required]
        [Compare(nameof(Password))]
        public string ConfirmPassword { get; set; } = null!;
    }
    public ResetPasswordModel resetPasswordModel = new ResetPasswordModel();

    [Parameter] 
    public string userId { get; set; } = null!;

    [Parameter] 
    public string encryptedToken { get; set; } = null!;

    private bool isLoading = false;

    private string token { get; set; } = null!;

    private bool isTokenValid = false;

    private bool changeSuccess = false;

    private bool error = false;
    private string errorMessage = "";

    private User user = null!;

    protected override async Task OnInitializedAsync()
    {
        var foundUser = await UserManager.FindByIdAsync(userId);
        if (foundUser is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        user = foundUser;
        token = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(encryptedToken));
        isTokenValid = await UserManager.VerifyUserTokenAsync(user, UserManager.Options.Tokens.PasswordResetTokenProvider, "ResetPassword", token);

        if (!isTokenValid)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
    }

    private async void HandleValidSubmit()
    {
        isLoading = true;
        isTokenValid = await UserManager.VerifyUserTokenAsync(user, UserManager.Options.Tokens.PasswordResetTokenProvider, "ResetPassword", token);
        if (isTokenValid)
        {
            var result = await UserManager.ResetPasswordAsync(user, token, resetPasswordModel.Password);
            if (result.Succeeded)
            {
                changeSuccess = true;
                error = false;
            }
            else
            {
                changeSuccess = false;
                error = true;
                errorMessage = result.Errors.First().Description;
            }
        }
        else
        {
            changeSuccess = false;
            error = true;
            errorMessage = "Your password change token expired";
        }
        isLoading = false;
        await InvokeAsync(StateHasChanged);
        return;
    }
}
