@page "/account/confirm-account/{userId}/{encryptedToken}"
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Confirm account</PageTitle>

<FormCard Title="" Width="400px">
    @if (alert)
    {
        <Alert Color="@alertColor" Dismissable="false" Style="text-align: left;" Class="mt-3">
            <Icon Name="@alertIcon" class="me-2"></Icon>
            @alertMessage
        </Alert>
    }
    <button class="btn btn-primary d-block w-100" @onclick="NavigateToLogin">
        Login
    </button>
</FormCard>


@code {
    [Parameter]
    public string userId { get; set; } = null!;

    [Parameter]
    public string encryptedToken { get; set; } = null!;

    public bool alert = false;
    public string alertMessage = "";
    public AlertColor alertColor = AlertColor.Danger;
    public IconName alertIcon = IconName.ExclamationTriangleFill;

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/account/login");
    }


    protected override async Task OnInitializedAsync()
    {
        var user = await UserManager.FindByIdAsync(userId);

        if (user == null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        var token = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(encryptedToken));

        var result = await UserManager.ConfirmEmailAsync(user, token);
        if (result.Succeeded)
        {
            alertMessage = "Your account has been confirmed. You can now log in.";
            alertColor = AlertColor.Success;
            alertIcon = IconName.CheckCircleFill;
        }
        else
        {
            alertMessage = "Your token is invalid.";
            alertColor = AlertColor.Danger;
            alertIcon = IconName.ExclamationTriangleFill;
        }
        alert = true;
        await InvokeAsync(StateHasChanged);
    }
}
