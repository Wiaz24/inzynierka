@page "/admin/users"
@inject UserManager<User> userManager
@inject ToastService ToastService

<ConfirmDialog @ref="dialog" />

<Offcanvas @ref="offcanvas" />

<div id="Content">
    <Grid TItem="User"
        @ref="grid"
        Class="table table-hover table-bordered table-striped table-dark"
        DataProvider="EmployeesDataProvider"
        AllowPaging="true"
        AllowFiltering="false"
        AllowSorting="true"
        PageSize="10"
        PaginationItemsTextFormat="Items {0} - {1} of {2}"
        ItemsPerPageText="no"
        PageSizeSelectorVisible="false"
        PageSizeSelectorItems="@(new int[] { 5,10,20 })"
        Responsive="true">

    <GridColumn TItem="User" HeaderText="Id" SortString="Id" SortKeySelector="item => item.Id">
        @context.Id
    </GridColumn>

    <GridColumn TItem="User" HeaderText="Email" SortString="Email" SortKeySelector="item => item.Email"> 
        @context.Email
    </GridColumn>

    <GridColumn TItem="User" HeaderText="Is confirmed" SortKeySelector="item => item.EmailConfirmed">
        @context.EmailConfirmed
    </GridColumn>

    <GridColumn TItem="User" HeaderText="Edit" PropertyName="Edit" Sortable="false" TextAlignment="Alignment.Center" HeaderTextAlignment="Alignment.Center"> 
        <ChildContent>
            <Button Color="ButtonColor.Secondary" @onclick="() => EditUser(context)">Edit</Button>
        </ChildContent>
    </GridColumn>

    <GridColumn TItem="User" HeaderText="Delete" PropertyName="Delete" Sortable="false" TextAlignment="Alignment.Center" HeaderTextAlignment="Alignment.Center">
        <ChildContent>
            <Button Color="ButtonColor.Danger" @onclick="() => DeleteUser(context)"> Delete </Button>
      </ChildContent>
    </GridColumn>
    </Grid>
</div>


@code {
    private Offcanvas offcanvas = default!;
    private ConfirmDialog dialog = default!;
    private Grid<User> grid = default!;

    private IEnumerable<User> users = default!;

    private bool edited = false;

    private async Task OnHideOffcanvasClick()
    {
        await offcanvas?.HideAsync();
    }
    private async Task<GridDataProviderResult<User>> EmployeesDataProvider(GridDataProviderRequest<User> request)
    {
        if (users is null || edited) // pull users only one time for client-side filtering, sorting, and paging
            users = await userManager.GetUsersInRoleAsync("StdUser");

        edited = false;
        return await Task.FromResult(request.ApplyTo(users));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task DeleteUser(User context)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this user?",
            message1: "Email: " + context.Email,
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            edited = true;
            await userManager.DeleteAsync(context);
            await grid.RefreshDataAsync();
            var message = new ToastMessage
            {
                Type = ToastType.Success,
                Title = "Success",
                HelpText = $"{DateTime.Now}",
                Message = $"User {context.Email} has been deleted successfully",
            };
            ToastService.Notify(message);
        }
    }

    private async Task EditUser(User context)
    {
        edited = true;
        await offcanvas?.ShowAsync<UserEditForm>(title: "Edit user data", new Dictionary<string, object>() { { "user", context } });
        await grid.RefreshDataAsync();
    }

}
