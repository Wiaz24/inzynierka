@page "/admin/database"
@inject ILoadService LoadService
@inject ToastService ToastService
@inject IPredictService PredictService
@attribute [Authorize(Roles = "Admin")]

<ConfirmDialog @ref="dialog" />

<div class="row justify-content-center">
    <div class="col-12 col-md-8 col-lg-6">
        <div class="d-flex justify-content-around align-items-stretch">
            <div class="p-2 col-4">
                <Card Class="mycard">
                    <CardBody>
                        <CardTitle>Manage users</CardTitle>
                        <CardText>Delete, change permissions or edit informations</CardText>
                        <Button Color="ButtonColor.Primary" To="/admin/users" Type="ButtonType.Link">Users</Button>
                    </CardBody>
                </Card>
            </div>
            <div class="p-2 col-8">
                <Card Class="mycard">
                    <CardBody>
                        <CardTitle>Run web scratcher and update database</CardTitle>
                        <EditForm Model="dateRangeToDownload" OnValidSubmit="DownloadNewData">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col">
                                    <div class="form-group mb-3">
                                        <label for="StartDate">Start Date</label>
                                        <InputDate class="form-control" id="StartDate" @bind-Value="dateRangeToDownload.StartDate" />
                                        <ValidationMessage For="() => dateRangeToDownload.StartDate"></ValidationMessage>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group mb-3">
                                        <label for="EndDate">End Date</label>
                                        <InputDate class="form-control" id="EndDate" @bind-Value="dateRangeToDownload.EndDate" />
                                        <ValidationMessage For="() => dateRangeToDownload.EndDate"></ValidationMessage>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-check mb-2">
                                        <InputCheckbox class="mycheckbox" id="OverrideExisting" @bind-Value="dateRangeToDownload.OverrideExisting" />
                                        <label for="OverrideExisting" class="form-label">Override existing values?</label>
                                    </div>
                                </div>
                            </div>
                            
                            <LoadingButton IsLoading="isLoadingDownload">
                                Update database
                            </LoadingButton>
                            @if(isLoadingDownload)
                            {
                                <Progress Class="mb-2 mt-2">
                                    <ProgressBar Color="ProgressColor.Primary" Width="@updateProgressValue" Label="@(updateProgressValue + "%")" />
                                </Progress>
                            }
                        </EditForm>
                    </CardBody>
                </Card>
            </div>
        </div>
        <div class="d-flex flex-column justify-content-around align-items-stretch">
            <div class="p-2 w-100">
                <Card Class="mycard">
                    <CardBody>
                        <div class="row mb-3">
                            <div class="col">
                                <h4> Entries in database</h4>
                                <CardText>Minimal date: <span style="color: orange;">@earliestDate</span></CardText>
                                <CardText>Maximal date: <span style="color: orange;">@latestDate</span></CardText>
                                <CardText>Total number of entries: <span style="color: orange;">@numberOfEntries</span></CardText>
                            </div>
                            <div class="col">
                                <h4> Real value data</h4>
                                <CardText>Minimal missing date: <span style="color: orange;">@missingEarliestValue</span></CardText>
                                <CardText>Maximal missing date: <span style="color: orange;">@missingLatestValue</span></CardText>
                                <CardText>Missing values: <span style="color: orange;">@missingValuesCount</span></CardText>
                            </div>
                            <div class="col">
                                <h4> Predictions</h4>
                                <CardText>Minimal missing date: <span style="color: orange;">@missingEarliestPredictions</span></CardText>
                                <CardText>Maximal missing date: <span style="color: orange;">@missingLatestPredictions</span></CardText>
                                <CardText>Missing values: <span style="color: orange;">@missingPredictionsCount</span></CardText>
                            </div>
                        </div>
                        
                        <p>Scrapped data completeness</p>
                        <Progress Class="mb-3">
                            <ProgressBar Color="ProgressColor.Primary" Width="@scrappedDataCompleteness" Label="@(scrappedDataCompleteness + "%")" />
                        </Progress>
                        <p>Prediction completeness</p>
                        <Progress Class="mb-3">
                            <ProgressBar Color="ProgressColor.Primary" Width="@predictionCompletness" Label="@(predictionCompletness + "%")" />
                        </Progress>
                        <Button Color="ButtonColor.Danger" @onclick="ClearLoadsAsync" Type="ButtonType.Button">Clear load table</Button>

                    </CardBody>
                </Card>
            </div>
            <div class="p-2 w-100">
                <Card Class="mycard">
                    <CardBody>
                        <CardTitle>Run predictor and update database</CardTitle>
                        <EditForm Model="dateRangeToPredict" OnValidSubmit="PredictNewData">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col">
                                    <div class="form-group mb-3">
                                        <label for="StartDate">Start Date</label>
                                        <InputDate class="form-control" id="StartDate" @bind-Value="dateRangeToPredict.StartDate" />
                                        <ValidationMessage For="() => dateRangeToPredict.StartDate"></ValidationMessage>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group mb-3">
                                        <label for="EndDate">End Date</label>
                                        <InputDate class="form-control" id="EndDate" @bind-Value="dateRangeToPredict.EndDate" />
                                        <ValidationMessage For="() => dateRangeToPredict.EndDate"></ValidationMessage>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-check mb-2">
                                        <InputCheckbox class="mycheckbox" id="OverrideExisting" @bind-Value="dateRangeToPredict.OverrideExisting" />
                                        <label for="OverrideExisting" class="form-label">Override existing values?</label>
                                    </div>
                                </div>
                            </div>

                            <LoadingButton IsLoading="isLoadingPredict">
                                Update database
                            </LoadingButton>
                            @if (isLoadingPredict)
                            {
                                <Progress Class="mb-2 mt-2">
                                    <ProgressBar Color="ProgressColor.Primary" Width="@updateProgressValue" Label="@(updateProgressValue + "%")" />
                                </Progress>
                            }
                        </EditForm>
                    </CardBody>
                </Card>
            </div>
        </div>
    </div>   
</div>


@code {


    System.Progress<int> updateProgress = new Progress<int>();
    private int updateProgressValue = 0;

    DateTime? earliestDate => LoadService.GetEarliestData()?.Date;
    DateTime? latestDate => LoadService.GetLatestData()?.Date;
    int numberOfEntries => LoadService.GetNumberOfLoads();


    private List<DateTime> missingLoads => LoadService.GetMissingRealLoad();
    private int missingValuesCount => missingLoads.Count;
    private DateTime? missingEarliestValue => missingLoads.Any() ? missingLoads.Min() : null;
    private DateTime? missingLatestValue => missingLoads.Any() ? missingLoads.Max() : null;

    private List<DateTime> missingPredictions => LoadService.GetMissingPPForecast();
    private int missingPredictionsCount => missingPredictions.Count;
    private DateTime? missingEarliestPredictions => missingPredictions.Any() ? missingPredictions.Min() : null;
    private DateTime? missingLatestPredictions => missingPredictions.Any() ? missingPredictions.Max() : null;

    public int scrappedDataCompleteness = 0;
    public int predictionCompletness = 0;
    
    

    private ConfirmDialog dialog = default!;

    public class DateRange
    {
        [Required]
        [ValidateScrapperDate(otherDate: "EndDate")]
        public DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));

        [Required]
        [ValidateScrapperDate(otherDate: "StartDate")]
        public DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));

        public bool OverrideExisting { get; set; }
    }
    DateRange dateRangeToDownload = new DateRange();
    DateRange dateRangeToPredict = new DateRange();

    private bool isLoadingDownload = false;
    private bool isLoadingPredict = false;

    protected override async Task OnInitializedAsync()
    {
        UpdateInfoPanel();
        updateProgress.ProgressChanged += (sender, e) =>
        {
            updateProgressValue = e;
            InvokeAsync(StateHasChanged);
        };
    }

    private async Task DownloadNewData()
    {
        isLoadingDownload = true;
        LoadService.DownloadLoads(dateRangeToDownload.StartDate, 
                                            dateRangeToDownload.EndDate, 
                                            progress: updateProgress,
                                            overrideValues: dateRangeToDownload.OverrideExisting);

        var message = new ToastMessage
        {
            Type = ToastType.Success,
            Title = "Success",
            HelpText = $"{DateTime.Now}",
            Message = $"Database has been updated"
        };
        ToastService.Notify(message);
        UpdateInfoPanel();
        isLoadingDownload = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task PredictNewData()
    {
        isLoadingPredict = true;
        await InvokeAsync(StateHasChanged);
        PredictService.PredictDataOnRange(dateRangeToPredict.StartDate, 
                                                    dateRangeToPredict.EndDate, 
                                                    progress: updateProgress,
                                                    overrideValues: dateRangeToPredict.OverrideExisting);
        
        var message = new ToastMessage
            {
                Type = ToastType.Success,
                Title = "Success",
                HelpText = $"{DateTime.Now}",
                Message = $"Database has been updated"
            };
        ToastService.Notify(message);
        UpdateInfoPanel();
        isLoadingPredict = false;
        await InvokeAsync(StateHasChanged);
    }

    private void UpdateInfoPanel()
    {
        //var start = LoadService.GetEarliestData();
        //var end = LoadService.GetLatestData();
        //earliestDate = start is null ? null : start.Date;
        //latestDate = start is null ? null : end.Date;

        //numberOfEntries = LoadService.GetNumberOfLoads();

        TimeSpan? timeSpan = (latestDate - earliestDate);
        if (timeSpan.HasValue)
            scrappedDataCompleteness = (int)(numberOfEntries / (timeSpan.Value.TotalHours) * 100);
        else
            scrappedDataCompleteness = 0;

        if (numberOfEntries > 0)
            predictionCompletness = (int)Math.Round((1 - ((double)missingPredictionsCount / (double)numberOfEntries)) * 100);
        else
            predictionCompletness = 0;
    }

    private async Task ClearLoadsAsync()
    {
        var confirmation = await dialog.ShowAsync(
           title: "Are you sure you want to clear loads table?",
           message1: "This will delete all entries in load table.",
           message2: "Do you want to proceed?");

        if (confirmation)
        {
            LoadService.DeleteAllLoads();
            var message = new ToastMessage
                {
                    Type = ToastType.Success,
                    Title = "Success",
                    HelpText = $"{DateTime.Now}",
                    Message = $"Load table has been cleared"
                };
            ToastService.Notify(message);
            UpdateInfoPanel();
        }
    }
}
