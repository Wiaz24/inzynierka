@page "/admin/database"
@inject ILoadService LoadService
@inject ToastService ToastService
@inject IPredictService PredictService
@attribute [Authorize(Roles = "Admin")]

<ConfirmDialog @ref="dialog" />

<div class="row justify-content-center">
    <div class="col-12 col-md-8 col-lg-6">
        <div class="d-flex justify-content-around align-items-stretch">
            <div class="p-2 col-4">
                <Card Class="mycard">
                    <CardBody>
                        <CardTitle>Manage users</CardTitle>
                        <CardText>Delete, change permissions or edit informations</CardText>
                        <Button Color="ButtonColor.Primary" To="/admin/users" Type="ButtonType.Link">Users</Button>
                    </CardBody>
                </Card>
            </div>
            <div class="p-2 col-8">
                <Card Class="mycard">
                    <CardBody>
                        <CardTitle>Run web scratcher and update database</CardTitle>
                        <EditForm Model="dateRange" OnValidSubmit="UpdateDatabase">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col">
                                    <div class="form-group mb-3">
                                        <label for="StartDate">Start Date</label>
                                        <InputDate class="form-control" id="StartDate" @bind-Value="dateRange.StartDate" />
                                        <ValidationMessage For="() => dateRange.StartDate"></ValidationMessage>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group mb-3">
                                        <label for="EndDate">End Date</label>
                                        <InputDate class="form-control" id="EndDate" @bind-Value="dateRange.EndDate" />
                                        <ValidationMessage For="() => dateRange.EndDate"></ValidationMessage>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-check mb-2">
                                        <InputCheckbox class="mycheckbox" id="OverrideExisting" @bind-Value="dateRange.OverrideExisting" />
                                        <label for="OverrideExisting" class="form-label">Override existing values?</label>
                                    </div>
                                </div>
                            </div>
                            
                            <LoadingButton IsLoading="isLoading">
                                Update database
                            </LoadingButton>
                            @if(isLoading)
                            {
                                <Progress Class="mb-2 mt-2">
                                    <ProgressBar Color="ProgressColor.Primary" Width="@updateProgressValue" Label="@(updateProgressValue + "%")" />
                                </Progress>
                            }
                        </EditForm>
                    </CardBody>
                </Card>
            </div>
        </div>
        <div class="d-flex justify-content-around align-items-stretch">
            <div class="p-2 w-100">
                <Card Class="mycard">
                    <CardBody>
                        <CardTitle>Load data completeness</CardTitle>
                        <CardText>Minimal date: <span style="color: orange;">@earliestDate</span></CardText>
                        <CardText>Maximal date: <span style="color: orange;">@latestDate</span></CardText>
                        <CardText>Total number of entries: <span style="color: orange;">@numberOfEntries</span></CardText>

                        <p>Scrapped data completeness</p>
                        <Progress Class="mb-3">
                            <ProgressBar Color="ProgressColor.Primary" Width="@scrappedDataCompleteness" Label="@(scrappedDataCompleteness + "%")" />
                        </Progress>
                        <p>Prediction completeness</p>
                        <Progress Class="mb-3">
                            <ProgressBar Color="ProgressColor.Primary" Width="@predictionCompletness" Label="@(predictionCompletness + "%")" />
                        </Progress>
                        <Button Color="ButtonColor.Danger" @onclick="ClearLoadsAsync" Type="ButtonType.Button">Clear load table</Button>
                    </CardBody>
                </Card>
            </div>
            <div class="p-2 w-100">
                <Card Class="mycard">
                    <CardBody>
                        <CardTitle>Run predictor</CardTitle>
                      
                        <Button Color="ButtonColor.Primary" @onclick="MakePrediction" Type="ButtonType.Button">Run predictor</Button>
                    </CardBody>
                </Card>
            </div>
        </div>
    </div>   
</div>


@code {
    public int scrappedDataCompleteness = 0;
    public int predictionCompletness = 0;
    DateTime? earliestDate = default!;
    DateTime? latestDate = default!;
    int numberOfEntries = 0;

    System.Progress<int> updateProgress = new Progress<int>();
    private int updateProgressValue = 0;

    private ConfirmDialog dialog = default!;

    public class DateRange
    {
        [Required]
        [ValidateScrapperDate(otherDate: "EndDate")]
        public DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));

        [Required]
        [ValidateScrapperDate(otherDate: "StartDate")]
        public DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));

        public bool OverrideExisting { get; set; }
    }
    DateRange dateRange = new DateRange();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await UpdateInfoPanel();
        updateProgress.ProgressChanged += (sender, e) =>
        {
            updateProgressValue = e;
            InvokeAsync(StateHasChanged);
        };
    }

    private async Task UpdateDatabase()
    {
        isLoading = true;
        await LoadService.DownloadLoadsAsync(dateRange.StartDate, dateRange.EndDate, updateProgress);

        var message = new ToastMessage
        {
            Type = ToastType.Success,
            Title = "Success",
            HelpText = $"{DateTime.Now}",
            Message = $"Database has been updated"
        };
        ToastService.Notify(message);
        await UpdateInfoPanel();
        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateInfoPanel()
    {
        var start = await LoadService.GetEarliestData();
        var end = await LoadService.GetLatestData();
        earliestDate = start is null ? null : start.Date;
        latestDate = start is null ? null : end.Date;

        numberOfEntries = await LoadService.GetNumberOfLoads();

        TimeSpan? timeSpan = (latestDate - earliestDate);
        if (timeSpan.HasValue)
            scrappedDataCompleteness = (int)(numberOfEntries / (timeSpan.Value.TotalHours) * 100);
        else
            scrappedDataCompleteness = 0;

        int numberOfPredictions = await LoadService.GetNumberOfPredictions();

        if (numberOfEntries > 0)
            predictionCompletness = (int)(numberOfPredictions * 100 / numberOfEntries);
        else
            predictionCompletness = 0;
    }

    private async Task ClearLoadsAsync()
    {
        var confirmation = await dialog.ShowAsync(
           title: "Are you sure you want to clear loads table?",
           message1: "This will delete all entries in load table.",
           message2: "Do you want to proceed?");

        if (confirmation)
        {
            await LoadService.DeleteAllLoadsAsync();
            var message = new ToastMessage
                {
                    Type = ToastType.Success,
                    Title = "Success",
                    HelpText = $"{DateTime.Now}",
                    Message = $"Load table has been cleared"
                };
            ToastService.Notify(message);
            await UpdateInfoPanel();
        }
    }

    private async Task MakePrediction()
    {
        var points = LoadService.GetLoads(DateTime.Today.AddDays(-4).AddHours(1), DateTime.Today, false);
        float[] inputs = points.Select(x => x.ActualTotalLoad).ToArray();
        var answers = PredictService.Predict(inputs);
        int i = 0;
    }


}
