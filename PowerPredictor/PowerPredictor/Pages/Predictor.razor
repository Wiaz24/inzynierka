@page "/predictor"
@using System.Net.Mime;
@using Microsoft.AspNetCore.Http.Headers;
@inject ILoadService LoadService
@inject IJSRuntime JSRuntime
@inject IPredictService PredictService
@attribute [Authorize]

<PageTitle>Predictor</PageTitle>

<div class="container">
    <div class="d-flex justify-content-between">
        <div class="btn-group" role="group" aria-label="Basic example">
            <Button Color="ButtonColor.Secondary" @onclick="ShowToday">Today</Button>
            <Button Color="ButtonColor.Secondary" @onclick="ShowThisWeek">This week</Button>
            <Button Color="ButtonColor.Secondary" @onclick="ShowThisMonth">This month</Button>
            <Button Color="ButtonColor.Secondary" @onclick="ShowThisYear">This year</Button>
            <Dropdown>
                <DropdownToggleButton Color="ButtonColor.Secondary">Select period</DropdownToggleButton>
                <DropdownMenu Class="px-2">
                    <div class="d-flex align-content-center justify-content-center px-2">
                        <EditForm Model="dateRange" OnValidSubmit="ShowSelectedPeriod">
                            <DataAnnotationsValidator />
                            <div class="form-group mb-2 w-100">
                                <label for="StartDate">Start Date</label>
                                <InputDate class="form-control" id="StartDate" @bind-Value="dateRange.StartDate" />
                                <ValidationMessage For="() => dateRange.StartDate"></ValidationMessage>
                            </div>
                            <div class="form-group mb-2 w-100">
                                <label for="EndDate">End Date</label>
                                <InputDate class="form-control" id="EndDate" @bind-Value="dateRange.EndDate" />
                                <ValidationMessage For="() => dateRange.EndDate"></ValidationMessage>
                            </div>
                            <Button Class="w-100 d-block" Color="ButtonColor.Primary" Type="ButtonType.Submit">Show result</Button>
                        </EditForm>
                    </div>
                </DropdownMenu>
            </Dropdown>
        </div>
        <Button Color="ButtonColor.Secondary" @onclick="ExportCSV">Export to CSV</Button>
    </div>
    

    <LineChart @ref="lineChart" />
</div>


@code {
    class DateRange
    {
        [Required]
        [ValidateScrapperDate(otherDate: "EndDate")]
        public DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));

        [Required]
        [ValidateScrapperDate(otherDate: "StartDate")]
        public DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));
    }
    DateRange dateRange = new DateRange();
    private List<Load> displayedLoads = new List<Load>();
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    private List<string> chartLabels = new List<string>();

    private string ActualLoadColor = "rgb(88, 80, 141)";
    private string ForecastLoadColor = "rgb(255, 128, 0)";
    private bool firstRender = true;

    protected override async Task OnAfterRenderAsync(bool fRender)
    {
        if (fRender) await RenderPlot();
        await base.OnAfterRenderAsync(fRender);
        firstRender = false;
    }

    private void ShowToday()
    {
        var start = DateTime.Today;
        var end = DateTime.Today.AddHours(23);;
        UpdatePlot(start, end);
    }

    private void ShowThisWeek()
    {
        var start = DateTime.Today.AddDays(-7);
        var end = DateTime.Today.AddHours(23); ;
        UpdatePlot(start, end);
    }

    private void ShowThisMonth()
    {
        var start = DateTime.Today.AddMonths(-1);
        var end = DateTime.Today.AddHours(23); ;
        UpdatePlot(start, end);
    }

    private void ShowThisYear()
    {
        var start = DateTime.Today.AddYears(-1);
        var end = DateTime.Today.AddHours(23); ;
        UpdatePlot(start, end, true);
    }

    private void ShowSelectedPeriod()
    {
        var start = dateRange.StartDate.ToDateTime(TimeOnly.MinValue);          //from  00:00
        var end = dateRange.EndDate.ToDateTime(TimeOnly.MinValue.AddHours(23)); //to    23:00
        UpdatePlot(start, end);
    }

    private async void UpdatePlot(DateTime start, DateTime end, bool dayInterval = false)
    {
        displayedLoads = LoadService.GetLoads(start, end, dayInterval);

        int TimeDifference;

        if(dayInterval)
        {
            TimeDifference = (int)(end - start).TotalDays + 1;

            chartLabels = Enumerable.Range(0, TimeDifference)
               .Select(i => start.AddDays(i).ToString("dd.MM.yyyy"))
               .ToList();
        }
        else
        {
            TimeDifference = (int)(end - start).TotalHours + 1;

            chartLabels = Enumerable.Range(0, TimeDifference)
                .Select(i => start.AddHours(i).ToString(TimeDifference > 24 ? "dd.MM.yyyy HH:mm" : "HH:mm"))
                .ToList();
        }

        chartData = new ChartData()
        {
            Labels = chartLabels,
            Datasets = new List<IChartDataset>()
            {
                new LineChartDataset()
                {
                    Label = "Actual total load",
                    Data = displayedLoads.Select(l => l.ActualTotalLoad).ToList().ConvertAll(d => (double)d),
                    BackgroundColor = new List<string>{ ActualLoadColor },
                    BorderColor = new List<string>{ ActualLoadColor },
                    BorderWidth = new List<double>{2},
                    HoverBorderWidth = new List<double>{4},
                    PointBackgroundColor = new List<string>{ ActualLoadColor },
                    PointBorderColor = new List<string>{ ActualLoadColor },
                    PointRadius = new List<int>{0}, // hide points
                    PointHoverRadius = new List<int>{4},
                },
                new LineChartDataset()
                {
                    Label = "Forecast",
                    Data = displayedLoads.Select(l => l.PPForecastedTotalLoad).ToList().ConvertAll(d => (double)d),
                    BackgroundColor = new List<string>{ ForecastLoadColor },
                    BorderColor = new List<string>{ ForecastLoadColor },
                    BorderWidth = new List<double>{2},
                    HoverBorderWidth = new List<double>{4},
                    PointBackgroundColor = new List<string>{ ForecastLoadColor },
                    PointBorderColor = new List<string>{ ForecastLoadColor },
                    PointRadius = new List<int>{0}, // hide points
                    PointHoverRadius = new List<int>{4},
                }
            }
        };
        if (!firstRender)
            await lineChart.UpdateAsync(chartData, lineChartOptions);
    }



    private async Task RenderPlot()
    {
        lineChartOptions = new LineChartOptions();

        lineChartOptions.Interaction.Mode = InteractionMode.Index;

        lineChartOptions.Plugins.Title.Text = "Actual power demand";
        lineChartOptions.Plugins.Title.Display = true;
        lineChartOptions.Plugins.Title.Font.Size = 20;
        lineChartOptions.Plugins.Title.Color = "white";

        lineChartOptions.Responsive = true;

        lineChartOptions.Scales.X.Title.Text = "Time";
        lineChartOptions.Scales.X.Title.Display = true;
        lineChartOptions.Scales.X.Title.Color = "white";

        lineChartOptions.Scales.Y.Title.Text = "Power consumption [MW]";
        lineChartOptions.Scales.Y.Title.Display = true;
        lineChartOptions.Scales.Y.Title.Color = "white";

        ShowToday();

        await lineChart.InitializeAsync(chartData, lineChartOptions);
    } 

    private async void ExportCSV()
    {
        var csv = new StringBuilder();
        csv.AppendLine("Time,Actual total load[MW],Forecasted total load[MW]");

        foreach (var load in displayedLoads)
        {
            var newLine = string.Format(System.Globalization.CultureInfo.InvariantCulture,"{0},{1},{2}", load.Date.ToString("dd.MM.yyyy HH:mm"), load.ActualTotalLoad, load.PPForecastedTotalLoad);
            csv.AppendLine(newLine);
        }

        var fileName = "PowerPredictorData.csv";
        var fileBytes = Encoding.UTF8.GetBytes(csv.ToString());
        var fileStream = new MemoryStream(fileBytes);

        await JSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
    }
}
