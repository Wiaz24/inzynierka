@page "/predictor"

<PageTitle>Predictor</PageTitle>

<div class="btn-group" role="group" aria-label="Basic example">
    <Button Color="ButtonColor.Secondary">Today</Button>
    <Button Color="ButtonColor.Secondary">This month</Button>
    <Button Color="ButtonColor.Secondary">This year</Button>
    <Dropdown>
        <DropdownToggleButton Color="ButtonColor.Secondary">Select period</DropdownToggleButton>
        <DropdownMenu Style="width: 200px;">
            <div class="d-flex align-content-center justify-content-center">
                <EditForm Model="dateRange" OnValidSubmit="UpdatePlot">
                    <DataAnnotationsValidator />
                    <div class="form-group mb-2">
                        <label for="StartDate">Start Date</label>
                        <InputDate class="form-control" id="StartDate" @bind-Value="dateRange.StartDate" />
                        <ValidationMessage For="() => dateRange.StartDate"></ValidationMessage>
                    </div>
                    <div class="form-group mb-2">
                        <label for="EndDate">End Date</label>
                        <InputDate class="form-control" id="EndDate" @bind-Value="dateRange.EndDate" />
                        <ValidationMessage For="() => dateRange.EndDate"></ValidationMessage>
                    </div>
                    <Button Class="w-100 d-block" Color="ButtonColor.Primary" Type="ButtonType.Submit">Show result</Button>
                </EditForm>
            </div>
        </DropdownMenu>
    </Dropdown>
</div>

<LineChart @ref="lineChart" />

@code {
    private LineChart lineChart;
    class DateRange
    {
        [Required]
        [ValidateScrapperDate]
        public DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));

        [Required]
        [ValidateScrapperDate]
        public DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));
    }
    DateRange dateRange = new DateRange();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderWormAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task RenderWormAsync()
    {
        var data = new ChartData
            {
                Labels = new List<string> { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" },
                Datasets = new List<IChartDataset>()
                {
                    new LineChartDataset()
                    {
                        Label = "India",
                        Data = new List<double>{ 9, 20, 29, 33, 50, 66, 75, 86, 91, 105, 120, 126, 141, 150, 156, 164, 177, 180, 184, 195 },
                        BackgroundColor = new List<string>{ "rgb(88, 80, 141)" },
                        BorderColor = new List<string>{ "rgb(88, 80, 141)" },
                        BorderWidth = new List<double>{2},
                        HoverBorderWidth = new List<double>{4},
                        PointBackgroundColor = new List<string>{ "rgb(88, 80, 141)" },
                        PointBorderColor = new List<string>{ "rgb(88, 80, 141)" },
                        PointRadius = new List<int>{0}, // hide points
                        PointHoverRadius = new List<int>{4},
                    },
                    new LineChartDataset()
                    {
                        Label = "England",
                        Data = new List<double>{ 1, 1, 8, 19, 24, 26, 39, 47, 56, 66, 75, 88, 95, 100, 109, 114, 124, 129, 140, 142 },
                        BackgroundColor = new List<string>{ "rgb(255, 166, 0)" },
                        BorderColor = new List<string>{ "rgb(255, 166, 0)" },
                        BorderWidth = new List<double>{2},
                        HoverBorderWidth = new List<double>{4},
                        PointBackgroundColor = new List<string>{ "rgb(255, 166, 0)" },
                        PointBorderColor = new List<string>{ "rgb(255, 166, 0)" },
                        PointRadius = new List<int>{0}, // hide points
                        PointHoverRadius = new List<int>{4},
                    }
                }
            };

        var options = new LineChartOptions();

        options.Interaction.Mode = InteractionMode.Index;

        options.Plugins.Title.Text = "WORM";
        options.Plugins.Title.Display = true;
        options.Plugins.Title.Font.Size = 20;

        options.Responsive = true;

        options.Scales.X.Title.Text = "Overs";
        options.Scales.X.Title.Display = true;

        options.Scales.Y.Title.Text = "Runs";
        options.Scales.Y.Title.Display = true;

        await lineChart.InitializeAsync(data, options);
    }

    private void UpdatePlot()
    {
        
        InvokeAsync(StateHasChanged);
    }
}
